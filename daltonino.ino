// 20161128 erreur de saisie 8027->8024  ajout version
// 20161137 correction valeurs
// 20161126 LCDI2C connecté
// 20161125 nouvel étalonnage, remplacement méga en panne, CS=>#53
// 20160707 passage MEGA ok
// 20160607 vérification encourageante sur 1000->5022 à améliorer (étalonnage ?)
#include <EEPROM.h>
#include <Wire.h>
#include <LCD.h>
#include <LiquidCrystal_I2C.h>

int OutPut = 9; //input for pulseIn
const int s0 = 2, s1 = 3, s2 = 4, s3 = 5;
LiquidCrystal_I2C  lcd(0x3f, 2, 1, 0, 4, 5, 6, 7); // 0x3F is the I2C bus address for an unmodified module

// à déterminer lors d'un étalonnage
/* étalon IG
  unsigned int NR[] = {517, 434, 257, 365, 439, 597, 465, 452, 753, 460, 340, 413, 360, 340, 375, 340, 759, 776, 370, 357, 678, 815, 323, 419, 373, 390, 390, 475, 607, 580, 382, 425, 401, 450, 520, 405, 455, 570, 742, 742, 830, 1172, 1240, 1580, 1333, 1112, 614, 800, 480, 400, 766, 471, 458, 525, 461, 584, 736, 826, 810, 480, 1133, 845, 824, 1314, 933, 812, 529, 1745, 1818, 1934, 1942, 2140, 1910, 1491, 1825, 1657, 1863, 1860, 1328, 1893, 1150, 1474, 1893, 1404, 1834, 2008, 1719, 1920, 1415, 1111, 1417, 1712, 1785, 1624, 1900, 1992, 1790, 1922, 1905, 1865, 1590, 1163, 1950, 1132, 1708, 1721, 1790, 1388, 1217, 574, 1774, 940, 1845, 1565, 1252, 1967, 847, 1769, 1829, 1493, 1334, 892, 1030, 902, 1067, 1191, 798, 1202, 1185, 1225, 1495, 1446, 1516, 1505, 1542, 1564, 1805, 1782, 1654, 1046, 1658, 1816, 914, 1355, 613, 1040, 932, 519, 883, 1090, 637, 1240, 743, 894, 1560, 595, 883, 1032, 469, 1045, 877, 1191, 1177, 967, 1409, 1275, 1532, 1367, 1685, 1566, 1666, 1793, 1790, 2022, 796, 1186, 1180, 1643, 318, 388, 302, 1985, 2033, 292, 2000, 293, 2000, 460, 524, 825};
  unsigned int NG[] = {691, 557, 361, 743, 831, 1012, 964, 996, 1246, 760, 435, 581, 483, 468, 763, 561, 1054, 1043, 635, 621, 1055, 1170, 790, 828, 845, 836, 892, 1265, 1712, 1835, 1155, 1490, 1282, 1500, 1515, 1180, 1360, 1700, 2117, 2108, 2120, 2307, 2190, 2245, 2215, 2308, 1193, 2030, 1220, 820, 1932, 1449, 1585, 1900, 1320, 1809, 1967, 1472, 1730, 1333, 2151, 1337, 1865, 2215, 1714, 1153, 1577, 1882, 1935, 2082, 2197, 2445, 1830, 1501, 2153, 1655, 1866, 2210, 1073, 2191, 1155, 1178, 1716, 1155, 1704, 2180, 1451, 2295, 1486, 1024, 1360, 1610, 1842, 1946, 2050, 2160, 2245, 2300, 2332, 2170, 1535, 1278, 2269, 1369, 2185, 2120, 1631, 1266, 996, 563, 2076, 958, 2305, 1290, 1414, 1805, 687, 1921, 1569, 1268, 1197, 784, 1162, 1012, 1370, 1450, 939, 1405, 1545, 1681, 1786, 1750, 1763, 1746, 1972, 1858, 2155, 2198, 1988, 1273, 1979, 2153, 1114, 1524, 753, 1230, 1182, 598, 1085, 1281, 754, 1509, 871, 1037, 1856, 730, 1020, 1183, 546, 1518, 1519, 1945, 1955, 1837, 2118, 1944, 2226, 2190, 2260, 2388, 2343, 2431, 2285, 2520, 1662, 1816, 1709, 2240, 414, 472, 362, 2430, 2523, 355, 2475, 358, 2500, 530, 606, 993};
  unsigned int NB[] = {832, 433, 397, 1201, 1287, 1465, 1367, 1417, 1354, 1176, 421, 663, 508, 793, 1028, 945, 1037, 1146, 1145, 1100, 1293, 1530, 1190, 1195, 1180, 1043, 1210, 1435, 1582, 1570, 1242, 1425, 1318, 1410, 1495, 1290, 1220, 1405, 1758, 1745, 1768, 1937, 1840, 1930, 1942, 1960, 1122, 1742, 987, 645, 1650, 1134, 1230, 1543, 1180, 1409, 1604, 1057, 1410, 882, 1579, 877, 1243, 1808, 1127, 917, 1064, 1354, 1442, 1275, 1636, 2115, 1106, 1038, 1779, 1222, 1206, 1795, 651, 1637, 835, 685, 1037, 960, 1134, 1755, 1190, 1685, 1033, 744, 1295, 1777, 1949, 1860, 1780, 1980, 1997, 2085, 2018, 1965, 1740, 1296, 1988, 1386, 2013, 1885, 1579, 1581, 1436, 603, 1942, 1028, 2085, 1415, 1597, 1650, 598, 1785, 1696, 1377, 1055, 667, 964, 834, 1313, 1343, 782, 1237, 1420, 1675, 1617, 1535, 1503, 1486, 1788, 1567, 1830, 1885, 1720, 1144, 1666, 1860, 1002, 1282, 711, 1126, 1177, 535, 935, 1088, 671, 1318, 703, 887, 1601, 670, 856, 996, 458, 1597, 1648, 1764, 1892, 1526, 1982, 1898, 2016, 1910, 2052, 2087, 2061, 2127, 1980, 2188, 1641, 1703, 1559, 2008, 390, 424, 323, 2111, 2179, 325, 2130, 320, 2165, 480, 519, 866};
  unsigned int RAL[] = {1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1032, 1033, 1034, 1037, 2000, 2001, 2002, 2003, 2004, 2008, 2009, 2010, 2011, 2012, 3000, 3001, 3002, 3003, 3004, 3005, 3007, 3009, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3020, 3022, 3027, 3031, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 5000, 5001, 5002, 5003, 5004, 5005, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6024, 6025, 6026, 6027, 6028, 6029, 6032, 6033, 6034, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7008, 7009, 7010, 7011, 7012, 7013, 7015, 7016, 7021, 7022, 7023, 7024, 7026, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039, 7040, 7042, 7043, 7044, 7045, 7046, 7047, 8000, 8001, 8002, 8003, 8004, 8007, 8008, 8011, 8012, 8014, 8015, 8016, 8017, 8019, 8022, 8023, 8024, 8025, 8028, 9001, 9002, 9003, 9004, 9005, 9010, 9011, 9016, 9017, 9018, 9006, 9007};
*/
/* étalonnage CERP
  unsigned int NR[] = {524, 513, 535, 487, 640, 509, 488, 847, 481, 384, 381, 433, 376, 341, 382, 351, 928, 928, 400, 430, 409, 585, 274, 950, 345, 486, 390, 431, 542, 781, 588, 459, 146, 415, 179, 298, 487, 504, 793, 811, 820, 1122, 1279, 2261, 1560, 1285, 640, 988, 495, 422, 548, 514, 641, 583, 555, 165, 136, 602, 997, 1128, 507, 1183, 1068, 793, 1784, 943, 2785, 2846, 2984, 3155, 2559, 2131, 2842, 2485, 2765, 3087, 1795, 1056, 1544, 2150, 2663, 2548, 1824, 2620, 2929, 2546, 2869, 1934, 2141, 2352, 2443, 2140, 2969, 3038, 2593, 2782, 2724, 2885, 2142, 1398, 2734, 1265, 2444, 2682, 2618, 1804, 1518, 601, 2464, 1032, 2725, 2831, 2190, 1786, 2879, 1011, 2254, 2671, 1798, 1037, 1229, 1057, 1315, 1441, 1575, 1551, 1528, 1915, 1969, 2196, 1884, 2108, 2155, 942, 2859, 2240, 1166, 2364, 2642, 1054, 1773, 668, 1228, 1068, 487, 695, 1323, 505, 661, 1292, 753, 1642, 491, 918, 1073, 1456, 1178, 1683, 1629, 2049, 1792, 2335, 2337, 2469, 2218, 2989, 692, 1526, 1606, 1875, 348, 298, 3070, 596, 305, 3021, 242, 2802, 503};
  unsigned int NG[] = {704, 770, 856, 939, 1154, 1080, 1132, 1407, 781, 476, 485, 611, 528, 480, 800, 526, 1256, 1240, 688, 946, 718, 837, 392, 1428, 824, 914, 932, 930, 1533, 2377, 2254, 1854, 1292, 1623, 817, 456, 1837, 1650, 2627, 2655, 2514, 2860, 2862, 3394, 2976, 3004, 1327, 2814, 1397, 875, 1891, 2056, 2542, 2484, 1637, 1402, 1261, 2256, 1795, 2659, 1503, 2791, 1595, 2224, 3063, 1330, 2686, 2739, 3134, 3635, 1880, 1880, 3042, 2192, 2427, 3416, 1263, 389, 1541, 1476, 2765, 2105, 1353, 2175, 2934, 1811, 3046, 1835, 1753, 1986, 2265, 2490, 2918, 2974, 3088, 3172, 3301, 3191, 1957, 1501, 3042, 1635, 3054, 3161, 2034, 1532, 1172, 570, 2785, 1064, 3347, 2222, 1508, 1841, 2388, 768, 2439, 1964, 1424, 887, 1332, 1150, 1619, 1712, 1810, 1976, 2110, 2222, 2284, 2427, 2157, 2593, 2446, 926, 3312, 2678, 1189, 2723, 2897, 1273, 1914, 813, 1406, 1334, 484, 837, 1530, 556, 716, 1514, 820, 1824, 574, 1459, 1983, 2553, 2471, 2745, 2554, 3092, 3119, 3008, 3385, 3354, 2829, 3639, 1680, 2419, 2353, 2655, 433, 593, 3623, 693, 366, 3559, 273, 3329, 459};
  unsigned int NB[] = {859, 888, 1096, 1611, 1864, 1702, 1729, 1640, 1337, 470, 474, 709, 539, 920, 1134, 1024, 1255, 1416, 1366, 1598, 1424, 1096, 912, 2100, 1298, 1546, 1404, 1226, 1843, 2244, 1905, 1782, 909, 1725, 1198, 406, 1784, 1513, 2174, 2160, 2030, 2325, 2343, 2860, 2583, 2503, 1260, 2375, 1114, 694, 1453, 1549, 2008, 1957, 1524, 936, 768, 1681, 1209, 2016, 958, 2159, 951, 1324, 2389, 1036, 1853, 1440, 2161, 2983, 901, 1227, 2257, 1492, 1371, 2637, 713, 233, 1064, 802, 1774, 1080, 1068, 1312, 2232, 1431, 1784, 1189, 1306, 2339, 2554, 2493, 2456, 2754, 2768, 2900, 2979, 2870, 2348, 1693, 2624, 1710, 2796, 2796, 2017, 2018, 1809, 639, 2687, 1193, 3012, 2209, 1355, 2254, 2141, 678, 2300, 2234, 1259, 740, 1072, 941, 1585, 1592, 1567, 1826, 2168, 2028, 2002, 2012, 1810, 2381, 2003, 707, 2802, 2209, 973, 2247, 2377, 1133, 1560, 774, 1126, 1351, 306, 691, 1305, 501, 565, 1340, 720, 1526, 500, 1510, 2228, 2541, 2296, 2644, 2564, 2834, 2721, 2709, 2969, 2673, 2246, 3138, 1737, 2331, 2224, 2426, 414, 414, 3068, 587, 337, 3018, 239, 2821, 372};
  unsigned int RAL[] = {1000, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1034, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2012, 3000, 3002, 3003, 3004, 3005, 3007, 3009, 3011, 3012, 3013, 3014, 3015, 3017, 3018, 3019, 3020, 3022, 3024, 3026, 3027, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4009, 5001, 5002, 5003, 5004, 5005, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6033, 6034, 7000, 7001, 7002, 7003, 7005, 7006, 7008, 7009, 7010, 7011, 7012, 7013, 7015, 7016, 7021, 7022, 7023, 7024, 7026, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7040, 7039, 7042, 7043, 7044, 8000, 8001, 8003, 8004, 8007, 8008, 8011, 8012, 8014, 8016, 8017, 8019, 8022, 8023, 8024, 8025, 8028, 9001, 9002, 9005, 9006, 9010, 9011, 9016, 9017, 9018};
*/
/* étalonnage avec cache
  unsigned int NR[] = {524, 513, 535, 487, 640, 509, 488, 847, 481, 384, 381, 433, 376, 341, 382, 351, 928, 928, 400, 430, 409, 585, 274, 950, 345, 486, 390, 431, 542, 781, 588, 459, 146, 415, 179, 298, 487, 504, 793, 811, 820, 1122, 1279, 2261, 1560, 1285, 640, 988, 495, 422, 548, 514, 641, 583, 555, 165, 136, 602, 997, 1128, 507, 1183, 1068, 793, 1784, 943, 2785, 2846, 2984, 3155, 2559, 2131, 2842, 2485, 2765, 3087, 1795, 1056, 1544, 2150, 2663, 2548, 1824, 2620, 2929, 2546, 2869, 1934, 2141, 2352, 2443, 2140, 2969, 3038, 2593, 2782, 2724, 2885, 2142, 1398, 2734, 1265, 2444, 2682, 2618, 1804, 1518, 601, 2464, 1032, 2725, 2831, 2190, 1786, 2879, 1011, 2254, 2671, 1798, 1037, 1229, 1057, 1315, 1441, 1575, 1551, 1528, 1915, 1969, 2196, 1884, 2108, 2155, 942, 2859, 2240, 1166, 2364, 2642, 1054, 1773, 668, 1228, 1068, 487, 695, 1323, 505, 661, 1292, 753, 1642, 491, 918, 1073, 1456, 1178, 1683, 1629, 2049, 1792, 2335, 2337, 2469, 2218, 2989, 692, 1526, 1606, 1875, 348, 298, 3070, 596, 305, 3021, 242, 2802, 503};
  unsigned int NG[] = {704, 770, 856, 939, 1154, 1080, 1132, 1407, 781, 476, 485, 611, 528, 480, 800, 526, 1256, 1240, 688, 946, 718, 837, 392, 1428, 824, 914, 932, 930, 1533, 2377, 2254, 1854, 1292, 1623, 817, 456, 1837, 1650, 2627, 2655, 2514, 2860, 2862, 3394, 2976, 3004, 1327, 2814, 1397, 875, 1891, 2056, 2542, 2484, 1637, 1402, 1261, 2256, 1795, 2659, 1503, 2791, 1595, 2224, 3063, 1330, 2686, 2739, 3134, 3635, 1880, 1880, 3042, 2192, 2427, 3416, 1263, 389, 1541, 1476, 2765, 2105, 1353, 2175, 2934, 1811, 3046, 1835, 1753, 1986, 2265, 2490, 2918, 2974, 3088, 3172, 3301, 3191, 1957, 1501, 3042, 1635, 3054, 3161, 2034, 1532, 1172, 570, 2785, 1064, 3347, 2222, 1508, 1841, 2388, 768, 2439, 1964, 1424, 887, 1332, 1150, 1619, 1712, 1810, 1976, 2110, 2222, 2284, 2427, 2157, 2593, 2446, 926, 3312, 2678, 1189, 2723, 2897, 1273, 1914, 813, 1406, 1334, 484, 837, 1530, 556, 716, 1514, 820, 1824, 574, 1459, 1983, 2553, 2471, 2745, 2554, 3092, 3119, 3008, 3385, 3354, 2829, 3639, 1680, 2419, 2353, 2655, 433, 593, 3623, 693, 366, 3559, 273, 3329, 459};
  unsigned int NB[] = {859, 888, 1096, 1611, 1864, 1702, 1729, 1640, 1337, 470, 474, 709, 539, 920, 1134, 1024, 1255, 1416, 1366, 1598, 1424, 1096, 912, 2100, 1298, 1546, 1404, 1226, 1843, 2244, 1905, 1782, 909, 1725, 1198, 406, 1784, 1513, 2174, 2160, 2030, 2325, 2343, 2860, 2583, 2503, 1260, 2375, 1114, 694, 1453, 1549, 2008, 1957, 1524, 936, 768, 1681, 1209, 2016, 958, 2159, 951, 1324, 2389, 1036, 1853, 1440, 2161, 2983, 901, 1227, 2257, 1492, 1371, 2637, 713, 233, 1064, 802, 1774, 1080, 1068, 1312, 2232, 1431, 1784, 1189, 1306, 2339, 2554, 2493, 2456, 2754, 2768, 2900, 2979, 2870, 2348, 1693, 2624, 1710, 2796, 2796, 2017, 2018, 1809, 639, 2687, 1193, 3012, 2209, 1355, 2254, 2141, 678, 2300, 2234, 1259, 740, 1072, 941, 1585, 1592, 1567, 1826, 2168, 2028, 2002, 2012, 1810, 2381, 2003, 707, 2802, 2209, 973, 2247, 2377, 1133, 1560, 774, 1126, 1351, 306, 691, 1305, 501, 565, 1340, 720, 1526, 500, 1510, 2228, 2541, 2296, 2644, 2564, 2834, 2721, 2709, 2969, 2673, 2246, 3138, 1737, 2331, 2224, 2426, 414, 414, 3068, 587, 337, 3018, 239, 2821, 372};
  unsigned int RAL[] = {1000, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1034, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2012, 3000, 3002, 3003, 3004, 3005, 3007, 3009, 3011, 3012, 3013, 3014, 3015, 3017, 3018, 3019, 3020, 3022, 3024, 3026, 3027, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4009, 5001, 5002, 5003, 5004, 5005, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6033, 6034, 7000, 7001, 7002, 7003, 7005, 7006, 7008, 7009, 7010, 7011, 7012, 7013, 7015, 7016, 7021, 7022, 7023, 7024, 7026, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7040, 7039, 7042, 7043, 7044, 8000, 8001, 8003, 8004, 8007, 8008, 8011, 8012, 8014, 8016, 8017, 8019, 8022, 8023, 8024, 8025, 8028, 9001, 9002, 9005, 9006, 9010, 9011, 9016, 9017, 9018};
*/
// étalonnage cache corrigé
unsigned int NR[] = {536, 432, 429, 387, 539, 413, 395, 773, 427, 334, 421, 385, 339, 333, 294, 808, 841, 405, 368, 712, 286, 810, 295, 425, 390, 390, 460, 676, 576, 401, 136, 157, 383, 493, 497, 650, 705, 713, 965, 1110, 2106, 1654, 1267, 592, 842, 479, 370, 484, 460, 506, 451, 139, 114, 513, 837, 989, 534, 1225, 1109, 743, 1744, 979, 2841, 2904, 2988, 3189, 2652, 2015, 2687, 2532, 3006, 3150, 1548, 2938, 1503, 2213, 2609, 1869, 2701, 3007, 2508, 2918, 1908, 2023, 2416, 2451, 2057, 3112, 3078, 2518, 2748, 2778, 3013, 2162, 1440, 2816, 1309, 2504, 2805, 2715, 1692, 1464, 551, 2585, 1071, 2793, 2692, 2160, 1701, 2960, 951, 2249, 2806, 1858, 985, 1267, 936, 1363, 1474, 1560, 1432, 1591, 1872, 2000, 2235, 1803, 2124, 2128, 2613, 2937, 2156, 1166, 2401, 2695, 1014, 1811, 691, 1209, 1090, 548, 942, 1253, 747, 1624, 940, 1041, 2142, 662, 1320, 1018, 1457, 1208, 1727, 1677, 2156, 1609, 2496, 2010, 2232, 2537, 2606, 3080, 910, 1569, 1630, 2332, 357, 441, 3143, 596, 259, 3151, 306, 2880, 475};
unsigned int NG[] = {713, 622, 661, 720, 944, 864, 911, 1271, 670, 410, 591, 519, 472, 694, 447, 1078, 1113, 710, 643, 1093, 412, 1216, 742, 783, 907, 811, 1334, 2183, 2296, 1664, 1232, 685, 1363, 1851, 1523, 2390, 2552, 2438, 2746, 2727, 3290, 3108, 3028, 1207, 2623, 1365, 760, 1499, 1897, 2324, 1352, 1235, 1124, 2101, 1519, 2467, 1547, 2933, 1639, 2164, 3067, 1380, 2664, 2696, 2962, 3589, 1916, 1665, 2835, 2186, 2597, 3358, 1056, 3079, 1480, 1421, 2120, 1358, 2195, 2915, 1692, 3265, 1764, 1591, 1993, 2192, 2357, 3025, 2911, 2952, 3066, 3325, 3290, 1886, 1544, 3108, 1679, 3102, 3270, 2066, 1363, 1097, 510, 2898, 1097, 3412, 2038, 1418, 1732, 2443, 722, 2387, 2040, 1462, 824, 1359, 1017, 1671, 1749, 1779, 1807, 2176, 2135, 2304, 2449, 2040, 2611, 2398, 2931, 3372, 2536, 1324, 2740, 2916, 1212, 1947, 824, 1385, 1352, 619, 1132, 1438, 862, 1960, 1044, 1180, 2456, 793, 1955, 1882, 2541, 2544, 2803, 2602, 3223, 2959, 3335, 3370, 3283, 3412, 3286, 3723, 2040, 2467, 2385, 3173, 442, 524, 3709, 684, 301, 3701, 367, 3475, 534};
unsigned int NB[] = {868, 710, 852, 1325, 1657, 1461, 1495, 1519, 1186, 390, 679, 544, 915, 996, 872, 1082, 1301, 1420, 1311, 1458, 947, 1922, 1278, 1394, 1398, 1095, 1695, 2111, 1954, 1660, 865, 1049, 1496, 1823, 1477, 1960, 2054, 1932, 2168, 2172, 2727, 2694, 2531, 1162, 2203, 1086, 595, 1225, 1408, 1826, 1273, 747, 739, 1496, 994, 1836, 957, 2258, 982, 1197, 2353, 1073, 1822, 1360, 1946, 2886, 753, 1067, 2238, 1489, 1460, 2528, 568, 2070, 1024, 651, 1097, 1080, 1312, 2183, 1335, 2042, 1135, 1563, 2391, 2533, 2389, 2567, 2728, 2670, 2829, 3011, 2960, 2316, 1739, 2701, 1761, 2860, 2885, 2057, 1885, 1749, 537, 2801, 1247, 3093, 2013, 1702, 2185, 2201, 626, 2289, 2329, 1292, 695, 1101, 727, 1642, 1632, 1554, 1690, 2244, 1953, 2033, 2041, 1713, 2414, 1967, 2435, 2864, 2245, 1238, 2260, 2447, 1097, 1595, 754, 1325, 1373, 542, 963, 1224, 770, 1762, 867, 1009, 2106, 732, 2155, 2153, 2555, 2378, 2719, 2641, 2967, 2584, 3043, 2930, 2909, 2983, 2806, 3183, 2233, 2395, 2255, 2904, 423, 473, 3165, 578, 275, 3147, 325, 3035, 473};
unsigned int RAL[] = {1000, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1034, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009, 2012, 3000, 3002, 3003, 3004, 3005, 3007, 3009, 3011, 3012, 3013, 3014, 3015, 3017, 3018, 3020, 3022, 3024, 3026, 3027, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4009, 5001, 5002, 5003, 5004, 5005, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6033, 6034, 7000, 7001, 7002, 7003, 7005, 7006, 7008, 7009, 7010, 7011, 7012, 7013, 7015, 7016, 7021, 7022, 7023, 7024, 7026, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039, 7040, 7042, 7043, 7044, 8000, 8001, 8003, 8004, 8007, 8008, 8011, 8012, 8014, 8015, 8016, 8017, 8019, 8022, 8023, 8024, 8025, 8028, 9001, 9002, 9005, 9006, 9010, 9011, 9016, 9017, 9018};
int val[3];
const char message[]="Daltonino 1.0.1";
void setup()
{
  Serial.begin(9600);
  Serial.println(message);
  // init LCD
  lcd.setBacklightPin(3, POSITIVE);
  lcd.setBacklight(HIGH); // NOTE: You can turn the backlight off by setting it to LOW instead of HIGH
  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(message);
  lcd.setCursor(0, 1);
  lcd.print("TCS230 P.Monsel");
  // init TCS230
  pinMode(s0, OUTPUT);
  pinMode(s1, OUTPUT);
  pinMode(s2, OUTPUT);
  pinMode(s3, OUTPUT);
  pinMode(OutPut, INPUT);
  digitalWrite(s0, LOW);
  digitalWrite(s1, HIGH); //setting frequency selection to 20% (100% = instable 2% = imprécis)

  delay(1000);

  //readData();

}

int  getChannel(int ps2, int ps3) {
  unsigned int demiPeriode = 0;
  digitalWrite(s2, ps2);
  digitalWrite(s3, ps3); //setting for  color sensor
  demiPeriode = pulseIn(OutPut, LOW);//reading demi période
  delay(50);
  return demiPeriode;
}

void loop()
{

  val[0] = getChannel(LOW, LOW);
  val[1] = getChannel(HIGH, HIGH);
  val[2] = getChannel(LOW, HIGH);
  //rowL = getChannel(HIGH, LOW);
  reCol(val);
  Serial.println(F("===================="));
  delay(1000);
}
void reCol(int vc[3]) {
  int nbcol = 0;
  int ind = -1;
  nbcol = sizeof(NR) / sizeof(ind);
  float dist, dist_0 = 9999.99;
  for (int i = 0; i < nbcol; i++) {
    dist = sqrt(pow(float(NR[i]) - float(vc[0]), 2) + pow(float(NG[i]) - float(vc[1]), 2) + pow(float(NB[i]) - float(vc[2]), 2));
    if (i == 0) {
      dist_0 = dist;
      ind = i;
    }
    if (dist < dist_0) {
      dist_0 = dist;
      ind = i;
    }
  }
  Serial.print(F("correlation:"));
  Serial.println(dist_0);
  lcd.clear();
  lcd.setCursor(0, 0);
  char buf[20];
  int n = sprintf(buf, "RAL %3.0d", RAL[ind]);
  lcd.print(buf);

  Serial.println(buf);
  lcd.setCursor(0, 1);
  n = sprintf(buf, "R%d G%d B%d", NR[ind], NG[ind], NB[ind]);
  String nm = getRALName(RAL[ind]);
  lcd.print(nm);
  Serial.println(nm);
  //lcd.print(buf);
  Serial.println(buf);
  n = sprintf(buf, "R%d G%d B%d", vc[0], vc[1], vc[2]);
  Serial.println(buf);

}
// dump EEPROM au cas où
// ----------------------
void readData() {
  int  eeAddress = 0;
  unsigned  int frl , lg2;
  char  c;
  String nom;
  EEPROM.get(eeAddress, frl);
  eeAddress += sizeof(frl);
  while (frl != 0) {
    nom = "";
    Serial.print(frl);
    EEPROM.get(eeAddress, lg2);
    eeAddress += sizeof(lg2);
    //Serial.println(lg2);
    Serial.print(" - ");
    for (int k = 0; k < lg2; k++) {
      EEPROM.get(eeAddress++, c);
      nom += c;
      //Serial.print(c);
    }
    Serial.println(nom);
    //Serial.println("");
    EEPROM.get(eeAddress, frl);
    eeAddress += sizeof(frl);

  }
}
String  getRALName(int cle) {
  String retVal = "";
  int  eeAddress = 0;
  unsigned  int frl , lg2;
  char  c;
  String nom;
  EEPROM.get(eeAddress, frl);
  eeAddress += sizeof(frl);
  while (frl != 0) {
    nom = "";
    EEPROM.get(eeAddress, lg2);
    eeAddress += sizeof(lg2);
    for (int k = 0; k < lg2; k++) {
      EEPROM.get(eeAddress++, c);
      nom += c;
    }
    if (frl == cle) {
      retVal = nom;
      break;
    }
    EEPROM.get(eeAddress, frl);
    eeAddress += sizeof(frl);

  }
  return retVal;
}
